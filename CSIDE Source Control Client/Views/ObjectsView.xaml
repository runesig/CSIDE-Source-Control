<Fluent:RibbonWindow x:Class="CSIDESourceControl.Client.ObjectsView"
        xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CSIDESourceControl.Client"
        mc:Ignorable="d"
        Title="C/SIDE Source Control">
    <Fluent:RibbonWindow.Resources>
            <SolidColorBrush x:Key="BackgroundBrushClear" Color="White" />
            <SolidColorBrush x:Key="BackgroundBrushUnequal" Color="Gold" />
            <SolidColorBrush x:Key="BackgroundBrushUnexisting" Color="LemonChiffon" />
            <SolidColorBrush x:Key="BackgroundBrushEdited" Color="Salmon" />
            <SolidColorBrush x:Key="BackgroundBrush" Color="Azure" />
            <SolidColorBrush x:Key="BackgroundBrushSelected" Color="DodgerBlue" Opacity=".4"/>
            <SolidColorBrush x:Key="ForegroundBrushClear" Color="Black" />
        </Fluent:RibbonWindow.Resources>
    <Fluent:RibbonWindow.Style>
        <Style TargetType="{x:Type Window}">
            <Setter Property="Cursor" Value="Arrow"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsWorking}" Value="True">
                    <Setter Property="Cursor" Value="Wait"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Fluent:RibbonWindow.Style>
    <DockPanel>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="5" />
                <RowDefinition Height="3*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Fluent:Ribbon>
                <!--Backstage-->
                <Fluent:Ribbon.Menu>
                    <Fluent:Backstage Header="File">
                        <Fluent:BackstageTabControl>
                            <Fluent:BackstageTabItem Header="Destination Folder">
                                <Fluent:Button Name="buttonDestination" Header="Destination" Command="{Binding Path=ShowSelectDestinationFolder}"/>
                            </Fluent:BackstageTabItem>

                            <Fluent:BackstageTabItem Header="Open">
                                ...
                            </Fluent:BackstageTabItem>
                            <Fluent:SeparatorTabItem />
                            <Fluent:BackstageTabItem Header="Options">
                                ...
                            </Fluent:BackstageTabItem>
                        </Fluent:BackstageTabControl>
                    </Fluent:Backstage>
                </Fluent:Ribbon.Menu>
                <!--Tabs-->
                
                <!-- Git Start-->
                <Fluent:RibbonTabItem Header="Git">
                    <Fluent:RibbonGroupBox Header="Commit">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Label Grid.Row="0" Grid.Column="0"  x:Name="labelCommitMsg" Height="30" Margin="10,10,3,10" Content="Message" />
                            <Fluent:TextBox Grid.Row="0" Grid.Column="1" Name="textBoxProcessCommitMessage" ToolTip="Commit Message" MinWidth="300" Height="25" Margin="3,10,3,10" Text="{Binding GitCommitMessage, UpdateSourceTrigger=PropertyChanged}">
                                <Fluent:TextBox.InputBindings>
                                    <KeyBinding Command="{Binding GitCommitCommand}" Key="Return" />
                                </Fluent:TextBox.InputBindings>
                            </Fluent:TextBox>
                            <Fluent:Button Grid.Row="0" Grid.Column="2" Name="buttonProcessCommit" Header="Commit" ToolTip="Commit" SizeDefinition="Middle" Icon="Views\Images\Task-Send Status Report.png" LargeIcon="Views\Images\Task-Send Status Report.png" Command="{Binding Path=GitCommitCommand}"/>
                        </Grid>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Remote">
                        <Fluent:Button Name="buttonSyncSynchronize" Header="Sync" ToolTip="Sync (Pull and Push)" Icon="Views\Images\Recurring.png" LargeIcon="Views\Images\Recurring.png" Command="{Binding Path=GitSyncCommand}" />
                        <Fluent:Button Name="buttonPush" Header="Push" ToolTip="Push" SizeDefinition="Middle" Icon="Views\Images\News-Publish.png" LargeIcon="Views\Images\News-Publish.png" Command="{Binding Path=GitPushCommand}" />
                        <Fluent:Button Name="buttonPull" Header="Pull" ToolTip="Pull" SizeDefinition="Middle" Icon="Views\Images\News-Tick.png" LargeIcon="Views\Images\News-Tick.png" Command="{Binding Path=GitPullCommand}" />
                        <Fluent:Button Name="buttonRemote" Header="Set Git Remote" ToolTip="Set Git Remote" SizeDefinition="Middle" Icon="Views\Images\Link.png" LargeIcon="Views\Images\Link.png" Command="{Binding Path=GitSetRemoteCommand}" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Status">
                        <Fluent:Button Name="buttonStatus" Header="Status" ToolTip="Status" SizeDefinition="Large" Icon="Views\Images\Importance-High.png" LargeIcon="Views\Images\Importance-High.png" Command="{Binding Path=GitStatusCommand}"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Repository">
                        <Fluent:Button Name="buttonInit" Header="Init Git Repository" ToolTip="Initialize new repo" SizeDefinition="Large" Icon="Views\Images\Milestone-New.png" LargeIcon="Views\Images\Milestone-New.png" Command="{Binding Path=GitInitCommand}"/>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <!-- Git Stop-->

                <!-- Import Start -->
                <Fluent:RibbonTabItem Header="Import">
                    <Fluent:RibbonGroupBox Header="Objectfile">
                        <Fluent:Button Name="buttonOpenFromFolder" Header="Import from File" ToolTip="Import Objects from File" SizeDefinition="Large" Icon="Views\Images\Archive.png" LargeIcon="Views\Images\Archive.png" Command="{Binding Path=ShowOpenFileDialog}" />
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Server">
                        <Fluent:Button Name="buttonImport" Header="Import from Server" ToolTip="Import Objects from Server" SizeDefinition="Large" Icon="Views\Images\Importance-Low.png" LargeIcon="Views\Images\Importance-Low.png" Command="{Binding Path=ImportFinexeFileCommand}" />
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <!-- Import Stop -->


                <!-- Setup Start -->
                <Fluent:RibbonTabItem Header="Setup">
                    <Fluent:RibbonGroupBox Header="Folder">
                        <Fluent:Button Name="buttonDestinationFolder" Header="Set Working Folder" ToolTip="Set Working/Destination Folder" SizeDefinition="Large" Icon="Views\Images\Folder-Out Box.png" LargeIcon="Views\Images\Folder-Out Box.png" Command="{Binding Path=ShowSelectDestinationFolder}"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Server">
                        <Fluent:Button Name="buttonSettings" Header="Server Setup" ToolTip="Server Setup" SizeDefinition="Large" Icon="Views\Images\Settings.png" LargeIcon="Views\Images\Settings.png" Command="{Binding Path=ShowServerSettings}"/>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <!-- Setup Stop -->
                
            </Fluent:Ribbon>

            <!--<StackPanel Grid.Column="0" Grid.Row="0">
                --><!--Menu Start--><!--
                <Menu Width="Auto" Height="20" Background="{DynamicResource BackgroundBrushClear}">
                    <MenuItem Header="_File">
                        <MenuItem x:Name="_Import" Header="Open Object File" Command="{Binding Path=ShowOpenFileDialog}" />
                        <MenuItem x:Name="_ImportNAV" Header="_Import" Command="{Binding Path=ImportFinexeFileCommand}" />
                        <Separator />
                        <MenuItem x:Name="DestinationFolder" Header="_Select Destination Folder" Command="{Binding Path=ShowSelectDestinationFolder}" />
                        <Separator />
                        <MenuItem Header="_Exit" />
                    </MenuItem>
                    <MenuItem Header="_Git">
                        <MenuItem x:Name="Commmit" Header="_Commit" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitCommitCommand}"/>
                        <MenuItem x:Name="Push" Header="_Push" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitPushCommand}"/>
                        <MenuItem x:Name="Pull" Header="P_ull" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitPullCommand}"/>
                        <MenuItem x:Name="Sync" Header="_Sync" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitSyncCommand}"/>
                        <Separator />
                        <MenuItem x:Name="Status" Header="S_tatus" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitStatusCommand}"/>
                        <MenuItem x:Name="SetRemote" Header="Set _Remote" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitSetRemoteCommand}"/>
                        <MenuItem x:Name="Init" Header="_Init" HorizontalAlignment="Left" Width="Auto" Command="{Binding Path=GitInitCommand}"/>
                    </MenuItem>
                    <MenuItem Header="_Edit">
                        <MenuItem x:Name="SelectAll" Header="Select _All" HorizontalAlignment="Left" Width="Auto" />
                        <MenuItem x:Name="DeSelectAll" Header="_Deselect All" HorizontalAlignment="Left" Width="Auto" />
                        <Separator />
                        <MenuItem x:Name="Options" Header="_Options" HorizontalAlignment="Left" Width="Auto"/>
                    </MenuItem>
                    <MenuItem Header="_Help">
                        <MenuItem x:Name="About" Header="_About" HorizontalAlignment="Left" Width="Auto"/>
                    </MenuItem>
                </Menu>
                --><!--Menu End--><!--
            </StackPanel>-->

            <!-- Search Grid Start -->
            <Grid Grid.Column="0" Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- <ComboBox x:Name="showComboBox" Grid.Column="0" Grid.Row="0" Margin="10,10,3,10" MinWidth="200" Width="Auto"/> -->
                <!-- <TextBox x:Name="fieldFilterTextBox" Grid.Column="3" Grid.Row="0" Margin="3,10,3,10" MinWidth="100" Width="Auto"/> -->
                <!-- <ComboBox x:Name="fieldFilterComboBox" Grid.Column="4" Grid.Row="0" Margin="3,10,10,10"  /> -->
                
                <Grid Grid.Column="0" Grid.Row="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!--<Label x:Name="commitLabel" Grid.Row="0" Grid.Column="0" Height="25" Margin="10,10,3,10" Content="Commit Message" />
                    <TextBox x:Name="commitMessageTextBox" Grid.Row="0" Grid.Column="1"  MinWidth="300" Height="25" Margin="3,10,3,10" Text="{Binding GitCommitMessage}"/>
                    <Button x:Name="commitButton" Grid.Row="0" Grid.Column="2" Content="Commit" Height="25" Width="80" Margin="3,3,3,3" Command="{Binding GitCommitCommand}" />
                    <Button x:Name="syncButton" Grid.Row="0" Grid.Column="3" Content="Sync" Height="25" Width="80" Margin="3,3,3,3" Command="{Binding GitSyncCommand}" />-->
                </Grid>

                <ScrollViewer Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Margin="23,3,10,3" Background="{DynamicResource BackgroundBrushClear}">
                    <TextBlock x:Name="gitOutPut"  Text="{Binding GitOutput}" HorizontalAlignment="Left" FontWeight="Bold"/>
                </ScrollViewer>
            </Grid>
            <!-- Search Grid Stop -->

            <GridSplitter Grid.Column="0" Grid.Row="2" Height="5" HorizontalAlignment="Stretch" />

            <!--Datagrid Start-->
            <DataGrid Grid.Column="0" Grid.Row="3" HorizontalAlignment="Center"
                  Name="comparedDataGrid" 
                  ItemsSource="{Binding NavObjects}" 
                  Background="{DynamicResource BackgroundBrushClear}" 
                  AutoGenerateColumns="False" 
                  CanUserAddRows="False" 
                  AllowDrop="True"
                  Drop="comparedDataGrid_Drop">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <!--<EventSetter Event="MouseDoubleClick" />-->
                    </Style>
                </DataGrid.RowStyle>

                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <ContextMenu.ItemsSource>
                            <CompositeCollection>
                                <MenuItem x:Name="Copy" Header="Copy" />
                                <MenuItem x:Name="FilterToValue" Header="Filter To This Value" />
                            </CompositeCollection>
                        </ContextMenu.ItemsSource>
                    </ContextMenu>
                </DataGrid.ContextMenu>

                <DataGrid.Columns>
                    <!-- 'Select' Start-->
                    <DataGridTemplateColumn Header="Select" IsReadOnly="False" Width="60">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox HorizontalAlignment="Center" VerticalAlignment="Center" IsChecked="{Binding Selected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrushClear}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTemplateColumn.CellStyle>
                    </DataGridTemplateColumn>
                    <!-- 'Select' Stop -->

                    <!-- 'Id' Start-->
                    <DataGridTextColumn Header="Id" Binding="{Binding Id}" IsReadOnly="True" Width="80">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrushClear}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}" />
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'Id' Stop-->

                    <!-- 'Type' Start-->
                    <DataGridTextColumn Header="Type" Binding="{Binding Type}" IsReadOnly="True" Width="100">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrushClear}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'Type' Stop-->

                    <!-- 'Name' Start-->
                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" IsReadOnly="True" Width="*">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrushClear}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'Name' Stop-->

                    <!-- 'Date' Start-->
                    <DataGridTextColumn Header="Date" Binding="{Binding StringDate}" IsReadOnly="True" Width="*">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'Date' Stop-->

                    <!-- 'Time' Start-->
                    <DataGridTextColumn Header="Time" Binding="{Binding StringTime}" IsReadOnly="True" Width="*">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'Time' Stop-->

                    <!-- 'Version List' Start-->
                    <DataGridTextColumn Header="Version List" Binding="{Binding VersionList}" IsReadOnly="True" Width="*">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'Version List' Stop-->

                    <!-- 'No of Lines' Start-->
                    <DataGridTextColumn Header="No Of Lines" Binding="{Binding NoOfLines}" IsReadOnly="True" Width="*">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushEdited}" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}"/>
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushClear}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!-- 'No of Lines' Stop-->

                </DataGrid.Columns>
            </DataGrid>
            <!--Datagrid End-->

            <!--Statusbar Start-->
            <StatusBar Grid.Column="0" Grid.Row="4" Background="{DynamicResource BackgroundBrushClear}">
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="400" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="100" />
                            </Grid.ColumnDefinitions>
                        </Grid>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>
                <StatusBarItem Grid.Column="0" >
                    <TextBlock x:Name="DestFolder" Text="{Binding DestinationFolder}" Width="400" />
                </StatusBarItem>
                <Separator Grid.Column="1" />
                <StatusBarItem Grid.Column="2">
                    <TextBlock x:Name="RemoteUrl" Text="{Binding GitRemoteUrl}"  />
                </StatusBarItem>
                <Separator Grid.Column="3" />

                <StatusBarItem Grid.Column="4">
                    <TextBlock x:Name="Branch" Text="{Binding GitBranch}"  />
                </StatusBarItem>

                <Separator Grid.Column="5" />

                <StatusBarItem Grid.Column="6">
                    <ProgressBar x:Name="ProcessProgessBar" Value="{Binding ProgressBarValue}" Width="90" Height="16" />
                </StatusBarItem>
                <StatusBarItem Grid.Column="6">
                    <TextBlock x:Name="GridRowCountTextBox" Margin="3,3,3,3" Text="{Binding ProgressBarStatusText}" />
                </StatusBarItem>
            </StatusBar>
            <!--Statusbar End-->
            
        </Grid>
    </DockPanel>
</Fluent:RibbonWindow>
